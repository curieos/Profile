@import "bootstrap/scss/bootstrap";

@mixin box-shadow {
	box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}

.card {
	@include box-shadow;
}

.logo {
	width: 100%;
	border: 1px solid rgba(0, 0, 0, 0.125);
	border-radius: 50%;
	@include box-shadow;
}

.navbar-side {
	max-width: 100%;
	max-height: 100%;
	display: flex;
	flex-wrap: wrap; // allow us to do the line break for collapsing content
	align-items: flex-start;
	justify-content: space-between; // space out brand from logo
	padding: $navbar-padding-y $navbar-padding-x;

	// Because flex properties aren't inherited, we need to redeclare these first
	// few properties so that content nested within behave properly.
	%container-flex-properties {
		display: flex;
		flex-wrap: wrap;
		align-items: flex-start;
		justify-content: space-between;
	}

	.container,
	.container-fluid {
		@extend %container-flex-properties;
	}

	@each $breakpoint, $container-max-width in $container-max-widths {
		> .container#{breakpoint-infix($breakpoint, $container-max-widths)} {
			@extend %container-flex-properties;
		}
	}
}

.navbar-side-expand {
	@each $breakpoint in map-keys($grid-breakpoints) {
		$next: breakpoint-next($breakpoint, $grid-breakpoints);
		$infix: breakpoint-infix($next, $grid-breakpoints);

		&#{$infix} {
			@include media-breakpoint-down($breakpoint) {
				width: max-content;

				&.expanded {
					width: inherit;
					height: inherit;
				}

				%container-navbar-expand-#{$breakpoint} {
					padding-right: 0;
					padding-left: 0;
				}

				> .container,
				> .container-fluid {
					@extend %container-navbar-expand-#{$breakpoint};
				}

				@each $size, $container-max-width in $container-max-widths {
					> .container#{breakpoint-infix($size, $container-max-widths)} {
						@extend %container-navbar-expand-#{$breakpoint};
					}
				}
			}

			@include media-breakpoint-up($next) {
				width: inherit;
				height: inherit;
				flex-flow: column;
				justify-content: flex-start;

				.navbar-nav {
					flex-direction: column;

					.dropdown-menu {
						position: absolute;
					}

					.nav-link {
						padding-right: $navbar-nav-link-padding-x;
						padding-left: $navbar-nav-link-padding-x;
					}
				}

				// For nesting containers, have to redeclare for alignment purposes
				%container-nesting-#{$breakpoint} {
					flex-wrap: nowrap;
				}

				> .container,
				> .container-fluid {
					@extend %container-nesting-#{$breakpoint};
				}

				@each $size, $container-max-width in $container-max-widths {
					> .container#{breakpoint-infix($size, $container-max-widths)} {
						@extend %container-nesting-#{$breakpoint};
					}
				}

				.navbar-collapse {
					display: block !important; // stylelint-disable-line declaration-no-important

					// Changes flex-bases to auto because of an IE10 bug
					flex-basis: auto;
				}

				.navbar-toggler {
					display: none;
				}
			}
		}
	}
}

.navbar-side-container {
	z-index: $zindex-fixed;
	position: fixed;
	width: 100%;
	height: 100%;
}

@include media-breakpoint-up(md) {
	.navbar-side-container {
		width: 17rem;
	}
}

.content {
	width: 100%;
}

@include media-breakpoint-up(md) {
	.content {
		width: calc(100% - 17rem);
		margin-left: 17rem;
	}
}
